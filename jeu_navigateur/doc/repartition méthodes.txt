//---------------------------------------------------------
//REPARTITION DES METHODES DANS LES CLASSES
//---------------------------------------------------------


   // ----------------------------------------------------
   // PartieController
   // ----------------------------------------------------

        MOTIF GENERAL
            on verifie la requete
            on appelle la methode associée de partie
            si elle retourne une erreur on genere un message
            on construis la vue

                    ACTION DE JEU
        -------------------------------------------------


               // invoquerAction
               // -----------------------------------------------
                    teste la requete 
                    appelle partie->invoquer()
                    update()
                    construis la vue

               // attaquerAction
               // -----------------------------------------------
                    teste la requete
                    appelle partie->attaquer
                    update()
                    construis la vue

               // passerTourAction
               // -----------------------------------------------
                    teste la requete
                    appelle partie->finDeTour()
                    update()
                    construis la vue

               // AbandonAction
               // -----------------------------------------------
                    teste la requete
                    update()
                    appelle partie->abandon()


                    GESTION DE PARTIE
        -------------------------------------------------


               // createPartie
               // -----------------------------------------------
                    si la partie n'existe pas, on la crée ( ça 
                    c'est du lourd)

               // loadPartie
               // -----------------------------------------------
                    si la partie existe, on la charge

               // gestion de connexion
               // -----------------------------------------------
                   là je sais pas trop mais a un moment il faudra
                   tester que les joueurs connectés sont les bons


   // ----------------------------------------------------
   // Partie
   // ----------------------------------------------------

                    ACTION DE JEU
        -------------------------------------------------

               // invoke
               // -----------------------------------------------
                    Si herosActif->isCardInZone ( main )
                        si herosActif->canIBuy( carte ) (on peut la payer?)
                            herosActif->buy (soustrait le cout de la carte de la cagnotte)
                            herosActif->moveCard ( main à attente) 
                        sinon return false
                    sinon return false

                    //si la carte a une methode qui se déclanche à l'invocation,
                    //on l'appelle carte->onInvoke  (pour les sorts)
                    


               // attack ( attaquant, cible = null )
               // -----------------------------------------------
                    si joueurActif->isCardInZone( combat)
                        si cible = null
                            listerCliquable
                        sinon
                            attaquant->hit( cible )
                            moveCard( attente)
                    sinon return false
                    
               // passerTour
               // -----------------------------------------------
                    incremente partie->cptTour
                    appelle herosActif()->finirTour()
                    appelle partie->switchHeros()
                    appelle herosActif()->commencerTour()


               // passerTour
               // -----------------------------------------------

                    GESTION UPDATE
        -------------------------------------------------

               // update
               // -----------------------------------------------
                    Lit le tableau updateList ( qui contient les
                    objets à mettre a jour ) et met à 
                    jour la DB en effacant les doublons

               // addToUpdateList
               // -----------------------------------------------
                    ajoute l'objet passé en parametre à updateList


                    GESTION AFFICHAGE
        -------------------------------------------------

               // listClickable( situation )
               // -----------------------------------------------
                    remplit le tableau cliquableList avec la liste
                    des elements qui doivent être cliqucables en 
                    fonction de la situation


                    GESTION FIN DE PARTIE
        -------------------------------------------------

               // isGameOver (appelée dans subir et moveCard( cimetiere ))
               // -----------------------------------------------
                    verifie si un joueur est mort 
                        heros->isDead()
                    verifie si un joueur est à court de carte
                        heros->haveCarte()
                    si c'est le cas : $this->gameOver

               // gameOver
               // -----------------------------------------------
                    statistiques joueur
                    met la db a jour 
                    redirige vers un autre page

       // switchHeros
       // -----------------------------------------------
            echange le contenu des attributs herosActif et
            herosInatctif

       
   // ----------------------------------------------------
   // Heros
   // ----------------------------------------------------



                    GESTION ZONE DES CARTES
        -------------------------------------------------

               // isCardInZone( zone, carte)
               // -----------------------------------------------
                    verifie si une carte est dans une zone
                    retourne true si oui, false si non

               // moverCard(carte, zone arrivée)
               // -----------------------------------------------
                    dédlace une carte de sa zone actuelle à la 
                    zone d'arrivée
                    addToUpdateList( carte )

 ÇA IL FAUT LE FAIRE CONG // setTableauCartes
               // -----------------------------------------------
                    $cartes[ $card->getStatutNom() ][ $card->getId() ] 
                    

            

                    GESTION TOUR
        -------------------------------------------------

               // draw
               // -----------------------------------------------
                    selectionne des cartes au hasard
                    heros->deplacerCarte ( pioche à main) 
                    
               // endRound
               // -----------------------------------------------
                    foreach( carte en attente )
                        moveCard (attente to combat)

               // beginRound
               // -----------------------------------------------
                    draw()
                    allocateCagnotte

               // allocateCagnotte()
               // -----------------------------------------------
                    calcul la qté de mana a recevoir
                    this->setMana
                    addToUpdateList(this) 

                    GESTION DEGATS
        -------------------------------------------------


               // suffer(degat)
               // -----------------------------------------------
                    soustrait les degats aux pv
                    partie->addToUpdate ( this )


               // isDead
               // -----------------------------------------------
                    retourne true si moins de 1pv
                    sinon retourne false


                    GESTION ACHAT
        -------------------------------------------------


               // canIBuy(carte)
               // -----------------------------------------------
                    vérifie si on peut se payer la carte passée en 
                    paramètre
                    retourne true si oui

               // Buy
               // -----------------------------------------------
                    soustrait le prix de la carte à la cagnotte
                    addToUpdate

   // ----------------------------------------------------
   // Carte
   // ----------------------------------------------------

       // frapper(cible)
       // -----------------------------------------------
            appelle subir
            si la cible est une creature, reçoit des dégats 
            en retour


       // subir(degat)
       // -----------------------------------------------
            soustrait les degats aux pv


       // isDead
       // -----------------------------------------------
            retourne true si moins de 1pv
            sinon retourne false

       // onInvocation
       // -----------------------------------------------
             méthode d'effet (notamment pour le sort) appelée
             lors de l'invocation de la carte
             sort->frapper

       // Display ( mode )
       // -----------------------------------------------
             retourn le code html pour afficher la carte 
             dans le plateau, en fonction du mode selectionné
             ( normal, cliquable ...)



